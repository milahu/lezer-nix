@top Nix { expression* }

expression { Mul | Div | Add | Sub | Int | string | Identifier | List | ConcatList | AttrSet | AttrPath }

@precedence {
  select @left,
  apply @left,
  negate @left,
  hasAttr @left,
  concatList @left,
  times @left,
  plus @left,
  not @left,
  update @left,
  compare @left,
  equal @left,
  and @left,
  or @left,
  imply @left
}

@skip { whitespace | LineComment | BlockComment }

@skip {} {
  // StringLine can be multiline, but then the indent is preserved
  // StringBlock is similar to python docstrings -> indent is removed
  string { StringLine | StringBlock }
  StringLine { '"' StringLineContent? '"' }
  StringBlock {
    stringBlockStart (StringBlockContent | StringBlockInterpolation)* stringBlockEnd
  }
}

// ''string ${expr} string''
StringBlockInterpolation { stringBlockInterpolationStart expression stringBlockInterpolationEnd }

Mul { expression !times "*" expression }
Div { expression !times "/" expression }

Add { expression (!plus "+" expression)+ }
Sub { expression !plus "-" expression }

List { "[" expression* "]" }

AttrSet { "{" (Attr)* "}" }

Attr { (string | Identifier) "=" expression ";" }

// TODO this is a "Select" token
AttrPath { (string | Identifier) ("." (string | Identifier))+ }

ConcatList { List (!concatList "++" List)+ }

Identifier { word }

@external tokens stringBlock from "./tokens" {
  StringBlockContent,
  stringBlockInterpolationStart,
  stringBlockEnd
}

@tokens {
  Int {
    std.digit+
  }

  StringLineContent { (!["] | "\\" _)+ }

  stringBlockStart { "''" }
  stringBlockInterpolationEnd { "}" }

  word { identifierChar (identifierChar | std.digit)* }
  identifierChar { std.asciiLetter | $[_$\u{a1}-\u{10ffff}] }

  // fix error: Overlapping tokens word and whitespace
  // TODO why overlapping? word is non-whitespace
  @precedence { word, whitespace }

  whitespace { std.whitespace+ }

  LineComment { "#" ![\n]* }

  BlockComment { "/*" blockCommentRest }
  blockCommentRest { ![*] blockCommentRest | "*" blockCommentAfterStar }
  blockCommentAfterStar { "/" | "*" blockCommentAfterStar | ![/*] blockCommentRest }
}
