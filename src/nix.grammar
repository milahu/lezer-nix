// Nix grammar for lezer-parser
// MIT License (c) 2022 Milan Hauth

@top Nix { expr? }

expr { expr_function }

expr_function
  { Lambda { Identifier ':' expr_function }
  | Lambda { '{' formals '}' ':' expr_function }
  | Lambda { '{' formals '}' '@' Identifier ':' expr_function }
  | Lambda { Identifier '@' '{' formals '}' ':' expr_function }
  | Assert { _ASSERT expr ';' expr_function }
  | With { _WITH expr ';' expr_function }
  ///// FIXME | Let { _LET binds _IN expr_function }
  | expr_if
  }

expr_if
  { If { _IF expr _THEN expr _ELSE expr }
  | expr_op
  }

expr_op
  { OpNot         {                        '!' expr_op !prec_not }
  | CallNeg       {                        '-' expr_op !prec_neg }
  | OpEq          { expr_op !prec_equal   '==' expr_op }
  | OpNEq         { expr_op !prec_equal   '!=' expr_op }
  | CallLT        { expr_op !prec_compare '<'  expr_op }
  | CallLE        { expr_op !prec_compare '<=' expr_op }
  | CallGT        { expr_op !prec_compare '>'  expr_op }
  | CallGE        { expr_op !prec_compare '>=' expr_op }
  | OpAnd         { expr_op !prec_and     '&&' expr_op }
  | OpOr          { expr_op !prec_or      '||' expr_op }
  | OpImpl        { expr_op !prec_impl    '->' expr_op }
  | OpUpdate      { expr_op !prec_update  '//' expr_op }

// TODO
//  | OpHasAttr     { expr_op !prec_hasAttr  '?' attrpath }

  | ConcatStrings { expr_op !prec_plus     '+' expr_op } // concat strings, Add
  | CallSub       { expr_op !prec_callSub  '-' expr_op }
  | CallMul       { expr_op !prec_mul_div  '*' expr_op }
  | CallDiv       { expr_op !prec_mul_div  '/' expr_op }
  | OpConcatLists { expr_op !prec_concat  '++' expr_op } // concat lists
  | expr_app
  }


expr_app
  {
    //Call { expr_app !prec_apply expr_select }
    //|
    expr_select
  }
//
expr_select
  {
    //Select { expr_simple !prec_select '.' attrpath }
    //| Select { expr_simple !prec_select '.' attrpath keyword<"or"> expr_select }

  // Backwards compatibility: because Nixpkgs has a rarely used
  // function named ‘or’, allow stuff like ‘map or [...]’.
  //| CallOr { expr_simple keyword<"or"> }

  //|
  expr_simple // TODO expr_simple { $$ = $1; }
  }



expr_simple
  //{ Pos { "__curPos" }
  { Pos { keyword<"__curPos"> }

  // TODO Var(Identifier) or Identifier?
  //| Var { Identifier }
  | Identifier

  | Int { integer }
  | Float { float }

  | TRUE
  | FALSE
  | NULL

//  | Bool { True { _TRUE } | False { _FALSE } }
//  | Null { Null { _NULL } }

//| Bool { _TRUE | _FALSE }
//
//_TRUE { keyword<"true"> }
//_FALSE { keyword<"false"> }
//_NULL { keyword<"null"> }

// FIXME strings
//  //| String { '"' string_parts '"' }
  | String { string_parts }
  //| IndentedString { IND_STRING_OPEN ind_string_parts IND_STRING_CLOSE }
  | IndentedString { ind_string_parts }
//  | Path { path_start PATH_END } // TODO path_start PATH_END { $$ = $1; }
//  | concatStrings { path_start string_parts_interpolated PATH_END }
//  //// TODO what is SPATH? // | CallStringPath { SPATH }
  | String { URI } // NOTE: if noURLLiterals: ParseError, URL literals are disabled

  | Parens { '(' expr ')' }

  // Let expressions `let {..., body = ...}' are just desugared
  // into `(rec {..., body = ...}).body'.
/////////// TODO  | SelectLetAttrSet { _LET '{' binds '}' }
//
//  | RecAttrSet { _REC '{' binds '}' }
//  | AttrSet { '{' binds '}' } // TODO not needed ~curlyOpen marker? // AttrSet { "{" ~curlyOpen (attr)* "}" }
  | List { '[' expr? (!prec_list expr)* ']' }
  }

// precedences

@precedence {
  prec_select @left,
  prec_list @left,
  prec_callSub @left, // workaround for Sub/Negative conflict
  prec_apply @left,
  prec_neg @left,
  prec_hasAttr @left,
  prec_concat @right,
  prec_mul_div @left,
  prec_plus @left,
  prec_not @left,
  prec_update @right,
  prec_compare @left,
  prec_equal @left,
  prec_and @left,
  prec_or @left,
  prec_impl @right,

  // FIXME?
  prec_pathRelative @right,
  prec_selectOrAttrPathDot
}

@skip {
  whitespace |
  Comment |
  CommentBlock
}



// strings
// String can be multiline, but then the indent is preserved
// StringBlock is similar to python docstrings -> indent is removed

// TODO separate tokens for "${" and "}" of StringInterpolation etc

// ''string ${expr} ''${escaped} string''
StringBlockInterpolation { stringBlockInterpolationStart expr stringBlockInterpolationEnd }

// "string ${expr} \${escaped} string"
StringInterpolation { stringInterpolationStart expr stringInterpolationEnd }

@external tokens stringBlock from "./tokens" {
  StringBlockContent,
  stringBlockInterpolationStart,
  stringBlockEnd
}

@external tokens string from "./tokens" {
  StringContent,
  stringInterpolationStart,
  stringEnd
}

@skip {} {

  string_parts
    //{ String { STR }
    { concatStrings { string_parts_interpolated }
    //| String { "" } // empty string // FIXME?
    }

  ind_string_parts
    { stringBlockStart (StringBlockContent | StringBlockInterpolation)* stringBlockEnd
      // { stringBlockStart (StringBlock | StringBlockInterpolation)* stringBlockEnd
    }

  string_parts_interpolated
    { stringStart (StringContent | StringInterpolation)* stringEnd
      // stringStart (String | StringInterpolation)* stringEnd
    }

  // TODO ind_string_parts_interpolated? not in nix/src/libexpr/parser.y

  //string { String | StringBlock }
  //StringBlock { stringBlockStart (StringBlockContent | StringBlockInterpolation)* stringBlockEnd }
  //String { stringStart (StringContent | StringInterpolation)* stringEnd }
}

//path_start
//  { Path { PATH }
//  | Path { HOME_PATH } // if evalSettings.pureEval: Error, the path '%s' can not be resolved in pure mode
//  }

// 
// path_start
//   { Path { PathAbsolute | !prec_pathRelative PathRelative | PathLibrary | PathHome | URI }
//   }



// attribute sets

// binds
//   { Attrs
//     {
//       ( Attr { attrpath '=' expr ';' }
//       | AttrInherit { _INHERIT attrs ';' }
//       | AttrInheritFrom { _INHERIT '(' expr ')' attrs ';' } // !!! Should ensure sharing of the expression in $4.
//       )*
//     }
//   }

// TODO restore
// 
// attrs
//   { AttrPath { ( AttrName_String { string_attr } )* }
//   }
// 
// attrpath
//   { AttrName { attrpath '.' attr }
//   | AttrName_String { attrpath '.' string_attr }
//   | AttrName { attr } // $$ = new std::vector<AttrName>; $$->push_back(AttrName(data->symbols.create($1)));
//   | AttrName_String { string_attr }
//   }
// 
// attr
//   { Identifier (OR_KW Identifier)* }
//
// string_attr
//   //{ ('"' string_parts '"')
//   { (string_parts)
//   | ('${' expr '}')
//   }

// FIXME Unused rule 'expr_list'
// -> List?
// expr_list
//  { List { expr_list expr_select } // $$ = $1; $1->elems.push_back($2); // !!! dangerous
//  }

formals
  { Formals { (formal? (',' formal)* (',' '...')?) | '...' }
  }

formal
  { Formal { Identifier }
  | Formal { Identifier '?' expr }
  }



// named keywords
Keyword<term> { @specialize[@name={term}]<Identifier, term> }

// anonymous keywords
keyword<term> { @specialize<Identifier, term> }



// keywords
// need underscore for anonymous nodes

_ASSERT { keyword<"assert"> }
_IF { keyword<"if"> }
_THEN { keyword<"then"> }
_ELSE { keyword<"else"> }

_WITH { keyword<"with"> }
_LET { keyword<"let"> }
_IN { keyword<"in"> }
OR_KW { keyword<"or"> }
_INHERIT { keyword<"inherit"> }
_REC { keyword<"rec"> }

_TRUE { keyword<"true"> }
_FALSE { keyword<"false"> }
_NULL { keyword<"null"> }

TRUE { keyword<"true"> }
FALSE { keyword<"false"> }
NULL { keyword<"null"> }



@tokens {
  //PATH_END { '/' } // TODO?

  //Integer { std.digit+ }
  integer { std.digit+ }

  //Float { ((std.digit+ "." std.digit+) | ("." std.digit+)) (("e" | "E") std.digit+)? }
  float   { ((std.digit+ "." std.digit+) | ("." std.digit+)) (("e" | "E") std.digit+)? }

  // note: nix allows minus in identifiers
  //identifier { identifierChar (identifierChar | std.digit | "-" )* }
  Identifier { identifierChar (identifierChar | std.digit | "-" )* }

  // TODO test
  //identifierChar { std.asciiLetter | $[_$\u{a1}-\u{10ffff}] }
  identifierChar { std.asciiLetter }

  // fix: Overlapping tokens Integer and Float
  // fix: Overlapping tokens Float and "."
  //@precedence { Float, Integer, "." }
  @precedence { float, integer, "." }

  stringBlockStart { "''" }
  stringBlockInterpolationEnd { "}" }

  stringStart { '"' }
  stringInterpolationEnd { "}" }

  // fix error: Overlapping tokens Identifier and whitespace
  // TODO why overlapping? Identifier is non-whitespace
  @precedence { Identifier, whitespace }

  whitespace { std.whitespace+ }

  // FIXME no need for whitespace after formals
  // this is valid:
  // let f={a}:a; in f{a=1;}
  // let f=a: a; in f 1
  // this is not:
  // let f=a:a; in f 1 # error: attempt to call something which is not a function but a string
  //Colon { ":" }
  //colonWithSpace { Colon std.whitespace+ }

  CommentOpen { "#" }
  Comment { CommentOpen ![\n]* }

  // TODO CommentBlockClose */
  CommentBlockOpen { "/*" }
  CommentBlock { CommentBlockOpen blockCommentRest }
  blockCommentRest { ![*] blockCommentRest | "*" blockCommentAfterStar }
  blockCommentAfterStar { "/" | "*" blockCommentAfterStar | ![/*] blockCommentRest }

  PathAbsolute { "/" pathContent }
  // fix: Overlapping tokens "/" and PathAbsolute
  @precedence { PathAbsolute, "/" }

  PathRelative { "./" pathContent }
  // fix: Overlapping tokens PathRelative and "."
  @precedence { PathRelative, "." }

  PathHome { "~/" pathContent }

  // TODO angle braces as tokens
  PathLibrary { "<" PathLibraryValue ">" }
  PathLibraryValue { pathContent }

  // TODO add more special characters?
  pathContent { (Identifier | ".")+ ("/" (Identifier | ".")+)* }

  uriSchema { std.asciiLetter (std.asciiLetter | std.digit | "+" | "-")* }
  uriPath { (std.asciiLetter | std.digit | "%" | "/" | "?" | ":" | "@" | "&" | "=" | "+" | "$" | "," | "-" | "_" | "." | "!" | "~" | "*" | "'")+ }
  URI { uriSchema ":" uriPath }

  // fix: Overlapping tokens Identifier and URI
  @precedence { URI, Identifier }

  // fix: Overlapping tokens Identifier and x
  // better?
  // kw<word> { @specialize[@name={word}]<Identifier, word> }
  @precedence {

    _IF,
    _THEN,
    _ELSE,

    _ASSERT,
    _WITH,
    _LET,
    _IN,
    OR_KW,
    _INHERIT,
    _REC,

    //PATH_END,

    //if, then, else,
    //assert,
    //with,
    //let,
    //in,
    //inherit,
    //URI,
    //False, True, Null,

    Identifier
    //,
    //identifier
  }
}
