@top Nix { expression* }

expression { binaryExpr | unaryExpr | Int | Float | string | Identifier | List | AttrSet | Select | Apply | If | boolean | null | Braces | Function | path }

// TODO Imply
// TODO and or compare
// TODO Sub?
binaryExpr { Mul | Div | Add | HasAttr | ConcatList | Update }

unaryExpr { Negative | Not }

@precedence {
  select @left,
  _list @left,
  // TODO remove apply?
  apply @left,
  negative @left,
  hasAttr @left,
  concatList @right,
  times @left,
  plus @left,
  not @left,
  update @right,
  compare @left,
  equal @left,
  and @left,
  or @left,
  imply @right
}

@skip { whitespace | CommentLine | CommentBlock }

@skip {} {
  // StringLine can be multiline, but then the indent is preserved
  // StringBlock is similar to python docstrings -> indent is removed
  string { StringLine | StringBlock }
  StringLine { '"' StringLineContent? '"' }
  StringBlock {
    stringBlockStart (StringBlockContent | StringBlockInterpolation)* stringBlockEnd
  }
}

// ''string ${expr} string''
StringBlockInterpolation { stringBlockInterpolationStart expression stringBlockInterpolationEnd }

Braces { "(" expression ")" }

Mul { expression !times "*" expression }
Div { expression !times "/" expression }

Add { expression (!plus "+" expression)+ }

// FIXME
// Sub is not used
// Negative has higher precedence than Sub, so 1-2 -> (1) (-2) -> Apply
// nix parser/interpreter: Nix(Apply(__sub,Int,Int))
//Sub { expression !plus "-" expression }

List { "[" expression? (!_list expression)* "]" }

//Function { Arguments ":" whitespace expression }
// FIXME Use of token whitespace conflicts with skip rule
// whitespace is required after :
Function { (Argument | Formals) ":" expression }

Argument { identifier }

Formals {
  FormalsAllBefore? "{" ((Formal? ("," Formal)* ("," FormalsRest)?) | FormalsRest) "}" |
  "{" ((Formal? ("," Formal)* ("," FormalsRest)?) | FormalsRest) "}" FormalsAllAfter?
}
FormalsAllBefore { Identifier "@" }
FormalsAllAfter { "@" Identifier }
FormalsRest { "..." }
Formal { Identifier FormalDefault? }
FormalDefault { "?" expression }

AttrSet { "{" (Attr)* "}" }

Attr { (string | Identifier | Select) "=" expression ";" }

// TODO no whitespace is allowed around the "."
// TODO parse default value
Select { (string | Identifier) "." AttrPath SelectDefault? }
SelectDefault { keyword<"or"> expression }

Apply { expression !apply expression }

Negative { !negative "-" expression }

// TODO allow interpolation
// a.${x}.${y}
AttrPath { (string | Identifier) ("." (string | Identifier))* }

path { PathAbsolute | PathRelative | PathLibrary }

HasAttr { expression !hasAttr "?" AttrPath }

ConcatList { expression !concatList "++" expression }

Not { "!" !not expression }

Update { expression !update "//" expression }

// TODO better
Identifier { identifier }

keyword<term> { @specialize[@name={term}]<identifier, term> }

boolean { @specialize[@name=BooleanLiteral]<identifier, "true" | "false"> }

null { @specialize[@name=NullLiteral]<identifier, "null"> }

If { keyword<"if"> expression keyword<"then"> expression keyword<"else"> expression }

@external tokens stringBlock from "./tokens" {
  StringBlockContent,
  stringBlockInterpolationStart,
  stringBlockEnd
}

@tokens {
  Int {
    std.digit+
  }

  Float {
    ((std.digit+ "." std.digit+) | ("." std.digit+)) (("e" | "E") std.digit+)?
  }
  // fix: Overlapping tokens Int and Float
  // fix: Overlapping tokens Float and "."
  @precedence { Float, Int, "." }

  StringLineContent { (!["] | "\\" _)+ }

  stringBlockStart { "''" }
  stringBlockInterpolationEnd { "}" }

  identifier { identifierChar (identifierChar | std.digit)* }
  identifierChar { std.asciiLetter | $[_$\u{a1}-\u{10ffff}] }

  // fix error: Overlapping tokens identifier and whitespace
  // TODO why overlapping? identifier is non-whitespace
  @precedence { identifier, whitespace }

  whitespace { std.whitespace+ }

  CommentLine { "#" ![\n]* }

  CommentBlock { "/*" blockCommentRest }
  blockCommentRest { ![*] blockCommentRest | "*" blockCommentAfterStar }
  blockCommentAfterStar { "/" | "*" blockCommentAfterStar | ![/*] blockCommentRest }

  PathAbsolute { "/" PathContent }
  // fix: Overlapping tokens "/" and PathAbsolute
  @precedence { PathAbsolute, "/" }

  PathRelative { "./" PathContent }
  // fix: Overlapping tokens PathRelative and "."
  @precedence { PathRelative, "." }

  PathLibrary { "<" PathContent ">" }

  // TODO produce extra token PathContent
  PathContent { identifier ("/" identifier)* }
}
