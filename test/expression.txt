# int
1
==>
Nix(Int)

# float
1.2
==>
Nix(Float)

# float only right of comma
.1
==>
Nix(Float)

# float exponent
1.2e3
==>
Nix(Float)

# float Exponent
1.2E3
==>
Nix(Float)

# add
1+2
==>
Nix(Add(Int,Int))

# add with whitespace
1 + 2
==>
Nix(Add(Int,Int))

# line comment
# hello
1
==>
Nix(Comment,Int)

# line comment precedence
#/*
1
#*/
==>
Nix(Comment,Int,Comment)

# block comment
/* hello */1
==>
Nix(CommentBlock,Int)

# block comment precedence
/*
# hello
*/
==>
Nix(CommentBlock)

# sub
1-2
==>
Nix(Sub(Int,Int))

# mul
1*2
==>
Nix(Mul(Int,Int))

# div
1/2
==>
Nix(Div(Int,Int))

# precedence mul add
1*2+3
==>
Nix(Add(Mul(Int,Int),Int))

# string line
"a"
==>
Nix(String(StringContent))

# string line with interpolation
"a${x}b"
==>
Nix(String(StringContent,StringInterpolation(Identifier),StringContent))

# string line with escaped interpolation
"a\${x}b"
==>
Nix(String(StringContent))

# string block single line
''a''
==>
Nix(StringBlock(StringBlockContent))

# list empty
[]
==>
Nix(List)

# list int
[1]
==>
Nix(List(Int))

# list int string
[1 "a"]
==>
Nix(List(Int,String(StringContent)))

# list concat 2
[] ++ []
==>
Nix(ConcatList(List,List))

# list concat 3
[] ++ [] ++ []
==>
Nix(ConcatList(List,ConcatList(List,List)))

# string concat 2
"a" + "b"
==>
Nix(Add(String(StringContent),String(StringContent)))

# string concat 3
"a" + "b" + "c"
==>
Nix(Add(String(StringContent),String(StringContent),String(StringContent)))

# attrset 0
{}
==>
Nix(AttrSet)

# attrset 2
{ "a" = 1; "b" = "2"; }
==>
Nix(AttrSet(Attr(String(StringContent),Int),Attr(String(StringContent),String(StringContent))))

# attrset inherit
{ inherit a b; }
==>
Nix(AttrSet(AttrInherit(Identifier,Identifier)))

# attrset inherit from
{ inherit (f) a b; }
==>
Nix(AttrSet(AttrInheritFrom(Identifier,Identifier,Identifier)))

# select string 2
"a"."b"
==>
Nix(Select(String(StringContent),AttrPath(String(StringContent))))

# select string 3
"a"."b"."c"
==>
Nix(Select(String(StringContent),AttrPath(String(StringContent),String(StringContent))))

# select identifier 3
a.b.c
==>
Nix(Select(Identifier,AttrPath(Identifier,Identifier)))

# select or default
a.b or false
==>
Nix(Select(Identifier,AttrPath(Identifier),SelectDefault(or,BooleanLiteral)))

# attrset with identifier
{ a = 1; }
==>
Nix(AttrSet(Attr(Identifier,Int)))

# string block with interpolation
''
  a${x}b
''
==>
Nix(StringBlock(StringBlockContent,StringBlockInterpolation(Identifier),StringBlockContent))

# string block with interpolation single line
''a${x}b''
==>
Nix(StringBlock(StringBlockContent,StringBlockInterpolation(Identifier),StringBlockContent))

# string block with escaped interpolation single line
''a''${x}b''
==>
Nix(StringBlock(StringBlockContent))

# string block with escaped interpolation
''
  a''${x}b
''
==>
Nix(StringBlock(StringBlockContent))

# string block multiple
''
  a''${x}b
'' + ''
  a''${x}b
'' + ''
  a''${x}b
''
==>
Nix(Add(StringBlock(StringBlockContent),StringBlock(StringBlockContent),StringBlock(StringBlockContent)))

# string block multiple
''
  a${x}b
'' + ''
  a${x}b
''
==>
Nix(Add(StringBlock(StringBlockContent,StringBlockInterpolation(Identifier),StringBlockContent),StringBlock(StringBlockContent,StringBlockInterpolation(Identifier),StringBlockContent)))

# if
if true then true else false
==>
Nix(If(BooleanLiteral,BooleanLiteral,BooleanLiteral))

# parens
(1)
==>
Nix(Braces(Int))

# function
a: x
==>
Nix(Function(Identifier,Identifier))

# function 2
a: b: x
==>
Nix(Function(Identifier,Function(Identifier,Identifier)))

# function 3
a: b: c: x
==>
Nix(Function(Identifier,Function(Identifier,Function(Identifier,Identifier))))

# function formals
{ a }: x
==>
Nix(Function(Formals(Formal(Identifier)),Identifier))

# function 2 formals
{ a }: { b }: x
==>
Nix(Function(Formals(Formal(Identifier)),Function(Formals(Formal(Identifier)),Identifier)))

# function 3 formals
{ a }: { b }: { c }: x
==>
Nix(Function(Formals(Formal(Identifier)),Function(Formals(Formal(Identifier)),Function(Formals(Formal(Identifier)),Identifier))))

# function formals 2
{ a, b }: x
==>
Nix(Function(Formals(Formal(Identifier),Formal(Identifier)),Identifier))

# function formals 3
{ a, b, c }: x
==>
Nix(Function(Formals(Formal(Identifier),Formal(Identifier),Formal(Identifier)),Identifier))

# function formals default
{ a ? 1 }: x
==>
Nix(Function(Formals(Formal(Identifier,FormalDefault(Int))),Identifier))

# function formals default 2
{ a ? 1, b ? 2 }: x
==>
Nix(Function(Formals(Formal(Identifier,FormalDefault(Int)),Formal(Identifier,FormalDefault(Int))),Identifier))

# function formals all
{ a } @ z: x
==>
Nix(Function(Formals(Formal(Identifier),FormalsAllAfter(Identifier)),Identifier))

# function formals all 2
{ a, b } @ z: x
==>
Nix(Function(Formals(Formal(Identifier),Formal(Identifier),FormalsAllAfter(Identifier)),Identifier))

# function formals all before
z @ { a }: x
==>
Nix(Function(Formals(FormalsAllBefore(Identifier),Formal(Identifier)),Identifier))

# function formals rest
{ a, ... }: x
==>
Nix(Function(Formals(Formal(Identifier),FormalsRest),Identifier))

# function formals rest 2
{ a, b, ... }: x
==>
Nix(Function(Formals(Formal(Identifier),Formal(Identifier),FormalsRest),Identifier))

# function formals rest only
{ ... }: x
==>
Nix(Function(Formals(FormalsRest),Identifier))

# update 2
a // b
==>
Nix(Update(Identifier,Identifier))

# update 3
a // b // c
==>
Nix(Update(Identifier,Update(Identifier,Identifier)))

# path absolute
/etc
==>
Nix(PathAbsolute)

# path absolute 2
/etc/nixos
==>
Nix(PathAbsolute)

# path relative
./a
==>
Nix(PathRelative)

# path relative 2
./a/b
==>
Nix(PathRelative)

# path library
<nixpkgs>
==>
Nix(PathLibrary)

# path library 2
<nixpkgs/nixos>
==>
Nix(PathLibrary)

# boolean true
true
==>
Nix(BooleanLiteral)

# boolean false
false
==>
Nix(BooleanLiteral)

# null
null
==>
Nix(NullLiteral)

# apply
a b
==>
Nix(Apply(Identifier,Identifier))

# apply 2
a b 1
==>
Nix(Apply(Apply(Identifier,Identifier),Int))

# apply 2 braces
a (b 1)
==>
Nix(Apply(Identifier,Braces(Apply(Identifier,Int))))

# HasAttr
a ? b
==>
Nix(HasAttr(Identifier,AttrPath(Identifier)))

# HasAttr 2
a ? b.c
==>
Nix(HasAttr(Identifier,AttrPath(Identifier,Identifier)))

# negative
-x
==>
Nix(Negative(Identifier))

# not
!x
==>
Nix(Not(Identifier))

# compare <
a < b
==>
Nix(CompareLT(Identifier,Identifier))

# compare >
a > b
==>
Nix(CompareGT(Identifier,Identifier))

# compare <=
a <= b
==>
Nix(CompareLTE(Identifier,Identifier))

# compare >=
a >= b
==>
Nix(CompareGTE(Identifier,Identifier))

# equal
a == b
==>
Nix(Equal(Identifier,Identifier))

# not equal
a != b
==>
Nix(NotEqual(Identifier,Identifier))

# and
a && b
==>
Nix(And(Identifier,Identifier))

# or
a || b
==>
Nix(Or(Identifier,Identifier))

# imply
a -> b
==>
Nix(Imply(Identifier,Identifier))

# uri
a://b:3?d=e&f=g
==>
Nix(URI)

# assert
assert a; x
==>
Nix(Assert(Identifier,Identifier))

# with
with a; x
==>
Nix(With(Identifier,Identifier))

# let
let a = b; in x
==>
Nix(Let(Attrs(Attr(Identifier,Identifier)),Identifier))

# let inherit
let inherit a b; in x
==>
Nix(Let(Attrs(AttrInherit(Identifier,Identifier)),Identifier))

# let inherit from
let inherit (f) a b; in x
==>
Nix(Let(Attrs(AttrInheritFrom(Identifier,Identifier,Identifier)),Identifier))
