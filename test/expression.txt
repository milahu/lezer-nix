# int
1
==>
Nix (
  Int
)

# float
1.2
==>
Nix (
  Float
)

# float only right of comma
.1
==>
Nix (
  Float
)

# float exponent
1.2e3
==>
Nix (
  Float
)

# float Exponent
1.2E3
==>
Nix (
  Float
)

# add
1+2
==>
Nix (
  Add (
    Int,
    Int
  )
)

# add with whitespace
1 + 2
==>
Nix (
  Add (
    Int,
    Int
  )
)

# line comment
# hello
1
==>
Nix (
  Comment,
  Int
)

# line comment precedence
#/*
1
#*/
==>
Nix (
  Comment,
  Int,
  Comment
)

# block comment
/* hello */1
==>
Nix (
  CommentBlock,
  Int
)

# block comment precedence
/*
# hello
*/
==>
Nix (
  CommentBlock
)

# sub
1-2
==>
Nix (
  Sub (
    Int,
    Int
  )
)

# Identifier not sub
a-b
==>
Nix (
  Var (
    Identifier
  )
)

# Identifier with single quote
f'
==>
Nix (
  Var (
    Identifier
  )
)

# mul
1*2
==>
Nix (
  Mul (
    Int,
    Int
  )
)

# div space around slash
1.0 / 2
==>
Nix (
  Div (
    Float,
    Int
  )
)

# div space after slash
1.0/ 2
==>
Nix (
  Div (
    Float,
    Int
  )
)

# call not div space before slash
1.0 /2
==>
Nix (
  Call (
    Float,
    PathAbsolute
  )
)

# path not div float int
1.0/2
==>
Nix (
  PathRelative
)

# path not div int int
1/2
==>
Nix (
  PathRelative
)

# path not div add add
+/+
==>
Nix (
  PathRelative
)

# path not div dot add
./+
==>
Nix (
  PathRelative
)

# path not div add dot
+/.
==>
Nix (
  PathRelative
)

# path not div concat dot
++/.
==>
Nix (
  PathRelative
)

# path not div dot concat
./++
==>
Nix (
  PathRelative
)

# path not div dot underscore
./_
==>
Nix (
  PathRelative
)

# path not div neg concat
-/++
==>
Nix (
  PathRelative
)

# error path with single quote
./f'
==>
Nix (
  PathRelative,
  ⚠
)

# precedence mul add
1*2+3
==>
Nix (
  Add (
    Mul (
      Int,
      Int
    ),
    Int
  )
)

# string line
"a"
==>
Nix (
  String (
    StringContent
  )
)

# string line empty
""
==>
Nix (
  String
)

# string line with interpolation
"a${x}b"
==>
Nix (
  String (
    StringContent,
    StringInterpolation (
      Var (
        Identifier
      )
    ),
    StringContent
  )
)

# string line with escaped interpolation
"a\${x}b"
==>
Nix (
  String (
    StringContent
  )
)

# string block single line
''a''
==>
Nix (
  IndentedString (
    IndentedStringContent
  )
)

# string block empty
''''
==>
Nix (
  IndentedString
)

# list empty
[]
==>
Nix (
  List
)

# list int
[1]
==>
Nix (
  List (
    Int
  )
)

# list int 2
[1 1]
==>
Nix (
  List (
    Int,
    Int
  )
)

# list int 3
[1 1]
==>
Nix (
  List (
    Int,
    Int
  )
)

# list int string
[1 "a"]
==>
Nix (
  List (
    Int,
    String (
      StringContent
    )
  )
)

# list concat 2
[] ++ []
==>
Nix (
  Concat (
    List,
    List
  )
)

# list concat 3
[] ++ [] ++ []
==>
Nix (
  Concat (
    List,
    Concat (
      List,
      List
    )
  )
)

# string concat 2
"a" + "b"
==>
Nix (
  Add (
    String (
      StringContent
    ),
    String (
      StringContent
    )
  )
)

# string concat 3 # TODO left or right associative?
"a" + "b" + "c"
==>
Nix (
  Add (
    Add (
      String (
        StringContent
      ),
      String (
        StringContent
      )
    ),
    String (
      StringContent
    )
  )
)

# attrset 0
{}
==>
Nix (
  Set
)

# attrset rec 0
rec {}
==>
Nix (
  RecSet
)

# attrset 1
{a=1;}
==>
Nix (
  Set (
    Attr (
      Identifier,
      Int
    )
  )
)

# attrset missing semicolon
{a=1}
==>
Nix (
  Set (
    Attr (
      Identifier,
      Int,
      ⚠
    )
  )
)

# attrset 1 underscore in identifier
{a_a=1;}
==>
Nix (
  Set (
    Attr (
      Identifier,
      Int
    )
  )
)

# attrset rec 1
rec {a=1;}
==>
Nix (
  RecSet (
    Attr (
      Identifier,
      Int
    )
  )
)

# attrset 2
{ "a" = 1; "b" = "2"; }
==>
Nix (
  Set (
    Attr (
      String (
        StringContent
      ),
      Int
    ),
    Attr (
      String (
        StringContent
      ),
      String (
        StringContent
      )
    )
  )
)

# attrset empty key
{ "" = 1; }
==>
Nix (
  Set (
    Attr (
      String,
      Int
    )
  )
)

# attrset string key
{ "inherit" = 1; }
==>
Nix (
  Set (
    Attr (
      String (
        StringContent
      ),
      Int
    )
  )
)

# attrset inherit
{ inherit a b; }
==>
Nix (
  Set (
    AttrInherit (
      Identifier,
      Identifier
    )
  )
)

# attrset inherit empty
{ inherit; }
==>
Nix (
  Set (
    AttrInherit
  )
)

# attrset inherit from
{ inherit (f) a b; }
==>
Nix (
  Set (
    AttrInheritFrom (
      Var (
        Identifier
      ),
      Identifier,
      Identifier
    )
  )
)

# select string 2
"a"."b"
==>
Nix (
  Select (
    String (
      StringContent
    ),
    String (
      StringContent
    )
  )
)

# select string 3
"a"."b"."c"
==>
Nix (
  Select (
    String (
      StringContent
    ),
    String (
      StringContent
    ),
    String (
      StringContent
    )
  )
)

# select identifier 3
a.b.c
==>
Nix (
  Select (
    Var (
      Identifier
    ),
    Identifier,
    Identifier
  )
)

# select interpolation 1
a.${b}
==>
Nix (
  Select (
    Var (
      Identifier
    ),
    AttrInterpolation (
      Var (
        Identifier
      )
    )
  )
)

# select a.b
a.b
==>
Nix (
  Select (
    Var (
      Identifier
    ),
    Identifier
  )
)

# select a.b in list
[ a.b ]
==>
Nix (
  List (
    Select (
      Var (
        Identifier
      ),
      Identifier
    )
  )
)

# call or
a or 2
==>
Nix (
  Call (
    Var (
      Identifier,
      ⚠
    ),
    Int
  )
)

# select or
a.b or 3
==>
Nix (
  SelectOr (
    Var (
      Identifier
    ),
    Identifier,
    Int
  )
)

# select or error
a.b or 3 or 4
==>
Nix (
  Call (
    SelectOr (
      Var (
        Identifier
      ),
      Identifier,
      Int,
      ⚠
    ),
    Int
  )
)

# select interpolation 2
a.${b}.${c}
==>
Nix (
  Select (
    Var (
      Identifier
    ),
    AttrInterpolation (
      Var (
        Identifier
      )
    ),
    AttrInterpolation (
      Var (
        Identifier
      )
    )
  )
)

# attrset with identifier
{ a = 1; }
==>
Nix (
  Set (
    Attr (
      Identifier,
      Int
    )
  )
)

# string block with interpolation
''
  a${x}b
''
==>
Nix (
  IndentedString (
    IndentedStringContent,
    IndentedStringInterpolation (
      Var (
        Identifier
      )
    ),
    IndentedStringContent
  )
)

# string block with interpolation single line
''a${x}b''
==>
Nix (
  IndentedString (
    IndentedStringContent,
    IndentedStringInterpolation (
      Var (
        Identifier
      )
    ),
    IndentedStringContent
  )
)

# string block with empty interpolation single line
''a${}b''
==>
Nix (
  IndentedString (
    IndentedStringContent,
    IndentedStringInterpolation (
      ⚠
    ),
    IndentedStringContent
  )
)

# string block with comment in interpolation single line
''a${/* hello */}b''
==>
Nix (
  IndentedString (
    IndentedStringContent,
    IndentedStringInterpolation (
      ⚠,
      CommentBlock
    ),
    IndentedStringContent
  )
)

# string block with escaped interpolation single line
''a''${x}b''
==>
Nix (
  IndentedString (
    IndentedStringContent
  )
)

# indented string with escaped interpolation after interpolation
''a${x}''${x}b''
==>
Nix (
  IndentedString (
    IndentedStringContent,
    IndentedStringInterpolation (
      Var (
        Identifier
      )
    ),
    IndentedStringContent
  )
)

# string block with escaped interpolation
''
  a''${x}b
''
==>
Nix (
  IndentedString (
    IndentedStringContent
  )
)

# string block multiple TODO left or right associative
''
  a''${x}b
'' + ''
  a''${x}b
'' + ''
  a''${x}b
''
==>
Nix (
  Add (
    Add (
      IndentedString (
        IndentedStringContent
      ),
      IndentedString (
        IndentedStringContent
      )
    ),
    IndentedString (
      IndentedStringContent
    )
  )
)

# string block multiple
''
  a${x}b
'' + ''
  a${x}b
''
==>
Nix (
  Add (
    IndentedString (
      IndentedStringContent,
      IndentedStringInterpolation (
        Var (
          Identifier
        )
      ),
      IndentedStringContent
    ),
    IndentedString (
      IndentedStringContent,
      IndentedStringInterpolation (
        Var (
          Identifier
        )
      ),
      IndentedStringContent
    )
  )
)

# if
if true then true else false
==>
Nix (
  If (
    TRUE,
    TRUE,
    FALSE
  )
)

# parens
(1)
==>
Nix (
  Parens (
    Int
  )
)

# function TODO test error in "a:a" -> missing space after colon
a: x
==>
Nix (
  Lambda (
    Identifier,
    Var (
      Identifier
    )
  )
)

# function with syntax error. missing space after colon
a:x
==>
Nix (
  String (
    URI
  )
)

# function 2
a: b: x
==>
Nix (
  Lambda (
    Identifier,
    Lambda (
      Identifier,
      Var (
        Identifier
      )
    )
  )
)

# function 3
a: b: c: x
==>
Nix (
  Lambda (
    Identifier,
    Lambda (
      Identifier,
      Lambda (
        Identifier,
        Var (
          Identifier
        )
      )
    )
  )
)

# function formals with space after colon
{ a }: x
==>
Nix (
  Lambda (
    Formals (
      Formal (
        Identifier
      )
    ),
    Var (
      Identifier
    )
  )
)

# function formals no space after colon
{ a }:x
==>
Nix (
  Lambda (
    Formals (
      Formal (
        Identifier
      )
    ),
    Var (
      Identifier
    )
  )
)

# function 2 formals
{ a }: { b }: x
==>
Nix (
  Lambda (
    Formals (
      Formal (
        Identifier
      )
    ),
    Lambda (
      Formals (
        Formal (
          Identifier
        )
      ),
      Var (
        Identifier
      )
    )
  )
)

# function 3 formals
{ a }: { b }: { c }: x
==>
Nix (
  Lambda (
    Formals (
      Formal (
        Identifier
      )
    ),
    Lambda (
      Formals (
        Formal (
          Identifier
        )
      ),
      Lambda (
        Formals (
          Formal (
            Identifier
          )
        ),
        Var (
          Identifier
        )
      )
    )
  )
)

# function formals 2
{ a, b }: x
==>
Nix (
  Lambda (
    Formals (
      Formal (
        Identifier
      ),
      Formal (
        Identifier
      )
    ),
    Var (
      Identifier
    )
  )
)

# function formals 3
{ a, b, c }: x
==>
Nix (
  Lambda (
    Formals (
      Formal (
        Identifier
      ),
      Formal (
        Identifier
      ),
      Formal (
        Identifier
      )
    ),
    Var (
      Identifier
    )
  )
)

# function formals default
{ a ? 1 }: x
==>
Nix (
  Lambda (
    Formals (
      Formal (
        Identifier,
        Int
      )
    ),
    Var (
      Identifier
    )
  )
)

# function formals default 2
{ a ? 1, b ? 2 }: x
==>
Nix (
  Lambda (
    Formals (
      Formal (
        Identifier,
        Int
      ),
      Formal (
        Identifier,
        Int
      )
    ),
    Var (
      Identifier
    )
  )
)

# function formals all
{ a } @ z: x
==>
Nix (
  Lambda (
    Formals (
      Formal (
        Identifier
      )
    ),
    Identifier,
    Var (
      Identifier
    )
  )
)

# function formals all 2
{ a, b } @ z: x
==>
Nix (
  Lambda (
    Formals (
      Formal (
        Identifier
      ),
      Formal (
        Identifier
      )
    ),
    Identifier,
    Var (
      Identifier
    )
  )
)

# function formals all before
z @ { a }: x
==>
Nix (
  Lambda (
    Identifier,
    Formals (
      Formal (
        Identifier
      )
    ),
    Var (
      Identifier
    )
  )
)

# function formals rest
{ a, ... }: x
==>
Nix (
  Lambda (
    Formals (
      Formal (
        Identifier
      )
    ),
    Var (
      Identifier
    )
  )
)

# function formals rest 2
{ a, b, ... }: x
==>
Nix (
  Lambda (
    Formals (
      Formal (
        Identifier
      ),
      Formal (
        Identifier
      ),
      TODO
    ),
    Var (
      Identifier
    )
  )
)

# function formals rest only
{ ... }: x
==>
Nix (
  Lambda (
    Formals (
      TODO
    ),
    Var (
      Identifier
    )
  )
)

# update 2
a // b
==>
Nix (
  Update (
    Var (
      Identifier
    ),
    Var (
      Identifier
    )
  )
)

# update 3
a // b // c
==>
Nix (
  Update (
    Var (
      Identifier
    ),
    Update (
      Var (
        Identifier
      ),
      Var (
        Identifier
      )
    )
  )
)

# path absolute
/etc
==>
Nix (
  PathAbsolute
)

# path absolute 2
/etc/nixos
==>
Nix (
  PathAbsolute
)

# path relative workdir ./.
./.
==>
Nix (
  PathRelative
)

# path relative parent ../. # TODO is this "spath"?
../.
==>
Nix (
  PathRelative
)

# path relative parent ./..
./..
==>
Nix (
  PathRelative
)

# path relative parent 2 ../..
../..
==>
Nix (
  PathRelative
)

# path relative dots ./...
./...
==>
Nix (
  PathRelative
)

# path relative dots .../.
.../.
==>
Nix (
  PathRelative
)

# path relative
./a
==>
Nix (
  PathRelative
)

# path relative 2
./a/b
==>
Nix (
  PathRelative
)

# path library
<nixpkgs>
==>
Nix (
  PathLibrary
)

# path library 2
<nixpkgs/nixos>
==>
Nix (
  PathLibrary
)

# boolean true
true
==>
Nix (
  TRUE
)

# boolean false
false
==>
Nix (
  FALSE
)

# null
null
==>
Nix (
  NULL
)

# apply
a b
==>
Nix (
  Call (
    Var (
      Identifier
    ),
    Var (
      Identifier
    )
  )
)

# apply 2
a b 1
==>
Nix (
  Call (
    Call (
      Var (
        Identifier
      ),
      Var (
        Identifier
      )
    ),
    Int
  )
)

# apply 2 braces
a (b 1)
==>
Nix (
  Call (
    Var (
      Identifier
    ),
    Parens (
      Call (
        Var (
          Identifier
        ),
        Int
      )
    )
  )
)

# HasAttr
a ? b
==>
Nix (
  HasAttr (
    Var (
      Identifier
    ),
    Identifier
  )
)

# HasAttr 2
a ? b.c
==>
Nix (
  HasAttr (
    Var (
      Identifier
    ),
    Identifier,
    Identifier
  )
)

# Select + HasAttr
a.b ? c.d
==>
Nix (
  HasAttr (
    Select (
      Var (
        Identifier
      ),
      Identifier
    ),
    Identifier,
    Identifier
  )
)

# negative Int
-1
==>
Nix (
  Neg (
    Int
  )
)

# negative Identifier
-x
==>
Nix (
  Neg (
    Var (
      Identifier
    )
  )
)

# not
!x
==>
Nix (
  Not (
    Var (
      Identifier
    )
  )
)

# compare <
a < b
==>
Nix (
  LT (
    Var (
      Identifier
    ),
    Var (
      Identifier
    )
  )
)

# compare >
a > b
==>
Nix (
  GT (
    Var (
      Identifier
    ),
    Var (
      Identifier
    )
  )
)

# compare <=
a <= b
==>
Nix (
  LE (
    Var (
      Identifier
    ),
    Var (
      Identifier
    )
  )
)

# compare >=
a >= b
==>
Nix (
  GE (
    Var (
      Identifier
    ),
    Var (
      Identifier
    )
  )
)

# equal
a == b
==>
Nix (
  Eq (
    Var (
      Identifier
    ),
    Var (
      Identifier
    )
  )
)

# not equal
a != b
==>
Nix (
  NEq (
    Var (
      Identifier
    ),
    Var (
      Identifier
    )
  )
)

# and
a && b
==>
Nix (
  And (
    Var (
      Identifier
    ),
    Var (
      Identifier
    )
  )
)

# or
a || b
==>
Nix (
  Or (
    Var (
      Identifier
    ),
    Var (
      Identifier
    )
  )
)

# imply
a -> b
==>
Nix (
  Imply (
    Var (
      Identifier
    ),
    Var (
      Identifier
    )
  )
)

# uri TODO test more
a://b:3?d=e&f=g
==>
Nix (
  String (
    URI
  )
)

# assert
assert a; x
==>
Nix (
  Assert (
    Var (
      Identifier
    ),
    Var (
      Identifier
    )
  )
)

# with
with a; x
==>
Nix (
  With (
    Var (
      Identifier
    ),
    Var (
      Identifier
    )
  )
)

# let
let a = b; in x
==>
Nix (
  Let (
    Attr (
      Identifier,
      Var (
        Identifier
      )
    ),
    Var (
      Identifier
    )
  )
)

# let inherit
let inherit a b; in x
==>
Nix (
  Let (
    AttrInherit (
      Identifier,
      Identifier
    ),
    Var (
      Identifier
    )
  )
)

# let inherit from
let inherit (f) a b; in x
==>
Nix (
  Let (
    AttrInheritFrom (
      Var (
        Identifier
      ),
      Identifier,
      Identifier
    ),
    Var (
      Identifier
    )
  )
)

# Primop
__add
==>
Nix (
  Primop
)
