# int
1
==>
Nix (
  Int
)

# float
1.2
==>
Nix (
  Float
)

# float only right of comma
.1
==>
Nix (
  Float
)

# float exponent
1.2e3
==>
Nix (
  Float
)

# float Exponent
1.2E3
==>
Nix (
  Float
)

# add
1+2
==>
Nix (
  ConcatStrings (
    Int,
    Int
  )
)

# add with whitespace
1 + 2
==>
Nix (
  ConcatStrings (
    Int,
    Int
  )
)

# line comment
# hello
1
==>
Nix (
  Comment,
  Int
)

# line comment precedence
#/*
1
#*/
==>
Nix (
  Comment,
  Int,
  Comment
)

# block comment
/* hello */1
==>
Nix (
  CommentBlock,
  Int
)

# block comment precedence
/*
# hello
*/
==>
Nix (
  CommentBlock
)

# sub
1-2
==>
Nix (
  CallSub (
    Int,
    Int
  )
)

# Identifier not sub
a-b
==>
Nix (
  Identifier
)

# mul
1*2
==>
Nix (
  CallMul (
    Int,
    Int
  )
)

# div
1/2
==>
Nix (
  CallDiv (
    Int,
    Int
  )
)

# precedence mul add
1*2+3
==>
Nix (
  ConcatStrings (
    CallMul (
      Int,
      Int
    ),
    Int
  )
)

# string line
"a"
==>
Nix (
  String (
    StringContent
  )
)

# string line empty
""
==>
Nix (
  String
)

# string line with interpolation
"a${x}b"
==>
Nix (
  String (
    StringContent,
    StringInterpolation (
      Identifier
    ),
    StringContent
  )
)

# string line with escaped interpolation
"a\${x}b"
==>
Nix (
  String (
    StringContent
  )
)

# string block single line
''a''
==>
Nix (
  IndentedString (
    StringBlockContent
  )
)

# string block empty
''''
==>
Nix (
  IndentedString
)

# list empty
[]
==>
Nix (
  List
)

# list int
[1]
==>
Nix (
  List (
    Int
  )
)

# list int string
[1 "a"]
==>
Nix (
  List (
    Call (
      Int,
      String (
        StringContent
      )
    )
  )
)

# list concat 2
[] ++ []
==>
Nix (
  OpConcatLists (
    List,
    List
  )
)

# list concat 3
[] ++ [] ++ []
==>
Nix (
  OpConcatLists (
    List,
    OpConcatLists (
      List,
      List
    )
  )
)

# string concat 2
"a" + "b"
==>
Nix (
  ConcatStrings (
    String (
      StringContent
    ),
    String (
      StringContent
    )
  )
)

# string concat 3 # TODO left or right associative?
"a" + "b" + "c"
==>
Nix (
  ConcatStrings (
    ConcatStrings (
      String (
        StringContent
      ),
      String (
        StringContent
      )
    ),
    String (
      StringContent
    )
  )
)

# attrset 0
{}
==>
Nix (
  AttrSet
)

# attrset 2
{ "a" = 1; "b" = "2"; }
==>
Nix (
  AttrSet (
    Attr (
      String (
        StringContent
      ),
      Int
    ),
    Attr (
      String (
        StringContent
      ),
      String (
        StringContent
      )
    )
  )
)

# attrset empty key
{ "" = 1; }
==>
Nix (
  AttrSet (
    Attr (
      String,
      Int
    )
  )
)

# attrset string key
{ "inherit" = 1; }
==>
Nix (
  AttrSet (
    Attr (
      String (
        StringContent
      ),
      Int
    )
  )
)

# attrset inherit
{ inherit a b; }
==>
Nix (
  AttrSet (
    AttrInherit (
      Identifier,
      Identifier
    )
  )
)

# attrset inherit empty
{ inherit; }
==>
Nix (
  AttrSet (
    AttrInherit
  )
)

# attrset inherit from
{ inherit (f) a b; }
==>
Nix (
  AttrSet (
    AttrInheritFrom (
      Identifier,
      Identifier,
      Identifier
    )
  )
)

# select string 2
"a"."b"
==>
Nix (
  Select (
    String (
      StringContent
    ),
    String (
      StringContent
    )
  )
)

# select string 3
"a"."b"."c"
==>
Nix (
  Select (
    String (
      StringContent
    ),
    String (
      StringContent
    ),
    String (
      StringContent
    )
  )
)

# select identifier 3
a.b.c
==>
Nix (
  Select (
    Identifier,
    Identifier,
    Identifier
  )
)

# select interpolation 1
a.${b}
==>
Nix (
  Select (
    Identifier,
    AttrInterpolation (
      Identifier
    )
  )
)

# call or
a or 2
==>
Nix (
  Call (
    Identifier,
    ⚠,
    Int
  )
)

# select or
a.b or 3
==>
Nix (
  SelectOr (
    Identifier,
    Identifier,
    Int
  )
)

# select or error
a.b or 3 or 4
==>
Nix (
  Call (
    SelectOr (
      Identifier,
      Identifier,
      Int,
      ⚠
    ),
    Int
  )
)

# select interpolation 2
a.${b}.${c}
==>
Nix (
  Select (
    Identifier,
    AttrInterpolation (
      Identifier
    ),
    AttrInterpolation (
      Identifier
    )
  )
)

# attrset with identifier
{ a = 1; }
==>
Nix (
  AttrSet (
    Attr (
      Identifier,
      Int
    )
  )
)

# string block with interpolation
''
  a${x}b
''
==>
Nix (
  IndentedString (
    StringBlockContent,
    StringBlockInterpolation (
      Identifier
    ),
    StringBlockContent
  )
)

# string block with interpolation single line
''a${x}b''
==>
Nix (
  IndentedString (
    StringBlockContent,
    StringBlockInterpolation (
      Identifier
    ),
    StringBlockContent
  )
)

# string block with empty interpolation single line
''a${}b''
==>
Nix (
  IndentedString (
    StringBlockContent,
    StringBlockInterpolation (
      ⚠
    ),
    StringBlockContent
  )
)

# string block with comment in interpolation single line
''a${/* hello */}b''
==>
Nix (
  IndentedString (
    StringBlockContent,
    StringBlockInterpolation (
      ⚠
    ),
    CommentBlock,
    StringBlockContent
  )
)

# string block with escaped interpolation single line
''a''${x}b''
==>
Nix (
  IndentedString (
    StringBlockContent
  )
)

# string block with escaped interpolation
''
  a''${x}b
''
==>
Nix (
  IndentedString (
    StringBlockContent
  )
)

# string block multiple TODO left or right associative
''
  a''${x}b
'' + ''
  a''${x}b
'' + ''
  a''${x}b
''
==>
Nix (
  ConcatStrings (
    ConcatStrings (
      IndentedString (
        StringBlockContent
      ),
      IndentedString (
        StringBlockContent
      )
    ),
    IndentedString (
      StringBlockContent
    )
  )
)

# string block multiple
''
  a${x}b
'' + ''
  a${x}b
''
==>
Nix (
  ConcatStrings (
    IndentedString (
      StringBlockContent,
      StringBlockInterpolation (
        Identifier
      ),
      StringBlockContent
    ),
    IndentedString (
      StringBlockContent,
      StringBlockInterpolation (
        Identifier
      ),
      StringBlockContent
    )
  )
)

# if
if true then true else false
==>
Nix (
  If (
    TRUE,
    TRUE,
    FALSE
  )
)

# parens
(1)
==>
Nix (
  Parens (
    Int
  )
)

# function TODO test error in "a:a" -> missing space after colon
a: x
==>
Nix (
  Lambda (
    Identifier,
    Identifier
  )
)

# function with syntax error. missing space after colon
a:x
==>
Nix (
  String (
    URI
  )
)

# function 2
a: b: x
==>
Nix (
  Lambda (
    Identifier,
    Lambda (
      Identifier,
      Identifier
    )
  )
)

# function 3
a: b: c: x
==>
Nix (
  Lambda (
    Identifier,
    Lambda (
      Identifier,
      Lambda (
        Identifier,
        Identifier
      )
    )
  )
)

# function formals with space after colon
{ a }: x
==>
Nix (
  Lambda (
    Formals (
      Formal (
        Identifier
      )
    ),
    Identifier
  )
)

# function formals no space after colon
{ a }:x
==>
Nix (
  Lambda (
    Formals (
      Formal (
        Identifier
      )
    ),
    Identifier
  )
)

# function 2 formals
{ a }: { b }: x
==>
Nix (
  Lambda (
    Formals (
      Formal (
        Identifier
      )
    ),
    Lambda (
      Formals (
        Formal (
          Identifier
        )
      ),
      Identifier
    )
  )
)

# function 3 formals
{ a }: { b }: { c }: x
==>
Nix (
  Lambda (
    Formals (
      Formal (
        Identifier
      )
    ),
    Lambda (
      Formals (
        Formal (
          Identifier
        )
      ),
      Lambda (
        Formals (
          Formal (
            Identifier
          )
        ),
        Identifier
      )
    )
  )
)

# function formals 2
{ a, b }: x
==>
Nix (
  Lambda (
    Formals (
      Formal (
        Identifier
      ),
      Formal (
        Identifier
      )
    ),
    Identifier
  )
)

# function formals 3
{ a, b, c }: x
==>
Nix (
  Lambda (
    Formals (
      Formal (
        Identifier
      ),
      Formal (
        Identifier
      ),
      Formal (
        Identifier
      )
    ),
    Identifier
  )
)

# function formals default
{ a ? 1 }: x
==>
Nix (
  Lambda (
    Formals (
      Formal (
        Identifier,
        Int
      )
    ),
    Identifier
  )
)

# function formals default 2
{ a ? 1, b ? 2 }: x
==>
Nix (
  Lambda (
    Formals (
      Formal (
        Identifier,
        Int
      ),
      Formal (
        Identifier,
        Int
      )
    ),
    Identifier
  )
)

# function formals all
{ a } @ z: x
==>
Nix (
  Lambda (
    Formals (
      Formal (
        Identifier
      )
    ),
    Identifier,
    Identifier
  )
)

# function formals all 2
{ a, b } @ z: x
==>
Nix (
  Lambda (
    Formals (
      Formal (
        Identifier
      ),
      Formal (
        Identifier
      )
    ),
    Identifier,
    Identifier
  )
)

# function formals all before
z @ { a }: x
==>
Nix (
  Lambda (
    Identifier,
    Formals (
      Formal (
        Identifier
      )
    ),
    Identifier
  )
)

# function formals rest
{ a, ... }: x
==>
Nix (
  Lambda (
    Formals (
      Formal (
        Identifier
      )
    ),
    Identifier
  )
)

# function formals rest 2
{ a, b, ... }: x
==>
Nix (
  Lambda (
    Formals (
      Formal (
        Identifier
      ),
      Formal (
        Identifier
      )
    ),
    Identifier
  )
)

# function formals rest only
{ ... }: x
==>
Nix (
  Lambda (
    Formals,
    Identifier
  )
)

# update 2
a // b
==>
Nix (
  OpUpdate (
    Identifier,
    Identifier
  )
)

# update 3
a // b // c
==>
Nix (
  OpUpdate (
    Identifier,
    OpUpdate (
      Identifier,
      Identifier
    )
  )
)

# path absolute
/etc
==>
Nix (
  Path (
    PathAbsolute
  )
)

# path absolute 2
/etc/nixos
==>
Nix (
  Path (
    PathAbsolute
  )
)

# path relative
./a
==>
Nix (
  Path (
    PathRelative
  )
)

# path relative 2
./a/b
==>
Nix (
  Path (
    PathRelative
  )
)

# path library
<nixpkgs>
==>
Nix (
  Path (
    PathLibrary
  )
)

# path library 2
<nixpkgs/nixos>
==>
Nix (
  Path (
    PathLibrary
  )
)

# boolean true
true
==>
Nix (
  TRUE
)

# boolean false
false
==>
Nix (
  FALSE
)

# null
null
==>
Nix (
  NULL
)

# apply
a b
==>
Nix (
  Call (
    Identifier,
    Identifier
  )
)

# apply 2
a b 1
==>
Nix (
  Call (
    Call (
      Identifier,
      Identifier
    ),
    Int
  )
)

# apply 2 braces
a (b 1)
==>
Nix (
  Call (
    Identifier,
    Parens (
      Call (
        Identifier,
        Int
      )
    )
  )
)

# HasAttr
a ? b
==>
Nix (
  OpHasAttr (
    Identifier,
    Identifier
  )
)

# HasAttr 2
a ? b.c
==>
Nix (
  OpHasAttr (
    Identifier,
    Identifier,
    Identifier
  )
)

# Select + HasAttr
a.b ? c.d
==>
Nix (
  OpHasAttr (
    Select (
      Identifier,
      Identifier
    ),
    Identifier,
    Identifier
  )
)

# negative Int
-1
==>
Nix (
  CallNeg (
    Int
  )
)

# negative Identifier
-x
==>
Nix (
  CallNeg (
    Identifier
  )
)

# not
!x
==>
Nix (
  OpNot (
    Identifier
  )
)

# compare <
a < b
==>
Nix (
  CallLT (
    Identifier,
    Identifier
  )
)

# compare >
a > b
==>
Nix (
  CallGT (
    Identifier,
    Identifier
  )
)

# compare <=
a <= b
==>
Nix (
  CallLE (
    Identifier,
    Identifier
  )
)

# compare >=
a >= b
==>
Nix (
  CallGE (
    Identifier,
    Identifier
  )
)

# equal
a == b
==>
Nix (
  OpEq (
    Identifier,
    Identifier
  )
)

# not equal
a != b
==>
Nix (
  OpNEq (
    Identifier,
    Identifier
  )
)

# and
a && b
==>
Nix (
  OpAnd (
    Identifier,
    Identifier
  )
)

# or
a || b
==>
Nix (
  OpOr (
    Identifier,
    Identifier
  )
)

# imply
a -> b
==>
Nix (
  OpImpl (
    Identifier,
    Identifier
  )
)

# uri TODO test more
a://b:3?d=e&f=g
==>
Nix (
  String (
    URI
  )
)

# assert
assert a; x
==>
Nix (
  Assert (
    Identifier,
    Identifier
  )
)

# with
with a; x
==>
Nix (
  With (
    Identifier,
    Identifier
  )
)

# let
let a = b; in x
==>
Nix (
  Let (
    Attr (
      Identifier,
      Identifier
    ),
    Identifier
  )
)

# let inherit
let inherit a b; in x
==>
Nix (
  Let (
    AttrInherit (
      Identifier,
      Identifier
    ),
    Identifier
  )
)

# let inherit from
let inherit (f) a b; in x
==>
Nix (
  Let (
    AttrInheritFrom (
      Identifier,
      Identifier,
      Identifier
    ),
    Identifier
  )
)
